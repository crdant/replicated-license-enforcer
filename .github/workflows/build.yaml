name: Build and sign image

on:
  push:
    paths-ignore:
      - LICENSE
      - '**.md'
      - examples/**
    tag:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+\-beta\.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+\-alpha\.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+\-rc\.[0-9]+'
  pull_request:
    paths-ignore:
      - LICENSE
      - '**.md'
      - examples/**

env:
  REGISTRY: ghcr.io
 
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
    - uses: actions/checkout@v4
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'  # Specify the Go version

    - name: Format 
      run: make fmt

    - name: Vet 
      run: make vet

    - name: Test 
      run: make test

    - name: Scan
      uses: aquasecurity/trivy-action@0.21.0
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Build
      run: make build

  package:
    runs-on: ubuntu-22.04
    needs:
      - build
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up melange
        uses: chainguard-dev/actions/setup-melange@main

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]] ; then
            echo "version=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          else
            echo "version=build.${{ github.run_id }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Prepare key directory
        id: prepare-keydir
        run: |
          mkdir keys

      - name: Generate key
        id: generate-key
        uses: chainguard-dev/actions/melange-keygen@main
        with:
          signing-key-path: ./keys/melange.rsa

      - name: Update package version
        id: update-package-version
        uses: mikefarah/yq@master
        with:
          cmd: yq -i '.package.version = "${{ steps.version.outputs.version }}"' ./deployment/melange.yaml

      - name: Create cache directory
        id: cache-dir
        shell: bash
        run: echo "cache_dir=$(go env GOMODCACHE)" >> "$GITHUB_OUTPUT"

      - name: Build enforcer package
        id: package
        uses: chainguard-dev/actions/melange-build-pkg@main
        with:
          config: ./deployment/melange.yaml
          archs: amd64,arm64
          sign-with-key: true
          signing-key-path: ./keys/melange.rsa
          cache-dir: ${{ steps.cache.outputs.cache_dir }}

      - name: Upload public key
        id: upload-key
        uses: actions/upload-artifact@v4
        with:
          name: melange-public-key
          path: ./keys/melange.rsa.pub

      - name: Upload package
        id: upload-package
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: ./packages

  meta:
    runs-on: ubuntu-22.04
    needs: 
      - package
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      tags: ${{ steps.tags.outputs.tags }}
    steps:
      - uses: actions/checkout@v4

      - name: Update container image version
        id: update-image-version
        uses: mikefarah/yq@master
        with:
          cmd: yq -i '.environment.VERSION = "${{ needs.package.outputs.version }}"' ./deployment/apko.yaml

      - name: Extract metadata (tags, labels) for image image
        id: meta
        uses: docker/metadata-action@v5
        with:
          flavor: |
            latest=auto
          tags: |
            type=sha
            type=schedule
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}.{{minor}}.{{patch}}
            type=edge,branch=main
            type=raw,${{ needs.prepare-build.outputs.version }}
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/replicated-license-enforcer

      - name: Generate an array of tags from the metadata
        id: tags
        run: |
          echo tags="$(echo '${{ steps.meta.outputs.json }}' | jq -c .tags)" >> "$GITHUB_OUTPUT"

  publish:
    runs-on: ubuntu-22.04
    needs: 
      - meta
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      matrix: 
        tag: ${{fromJson(needs.meta.outputs.tags)}}
    outputs:
      ref: ${{ steps.publish.outputs.digest }}
      image: ${{ steps.parse.outputs.image }}
      digest: ${{ steps.parse.outputs.digest }}
    steps:
      - uses: actions/checkout@v4

      - name: Download public key
        id: download-keys
        uses: actions/download-artifact@v4
        with:
          name: melange-public-key
          path: ./keys

      - name: Download packages
        id: download-packages
        uses: actions/download-artifact@v4
        with:
          name: packages
          path: ./packages
          
      - name: Push enforcer image
        uses: chainguard-images/actions/apko-publish@main
        id: publish
        with:
          config: ./deployment/apko.yaml
          tag: ${{ matrix.tag }}
          archs: amd64,arm64
          vcs-url: true
          generic-user: ${{ github.actor }}
          generic-pass: ${{ secrets.GITHUB_TOKEN }}

      - name: Parse ref
        id: parse
        run: |
          echo "image=$( echo '${{ steps.publish.outputs.digest }}' | cut -d'@' -f1)" >> "$GITHUB_OUTPUT"
          echo "digest=$( echo '${{ steps.publish.outputs.digest }}' | cut -d'@' -f2)" >> "$GITHUB_OUTPUT"
          
  scan:
    runs-on: ubuntu-22.04
    needs:
      - publish
    permissions:
      security-events: write
    steps:
      - name: Scan image
        uses: aquasecurity/trivy-action@0.21.0
        with:
          image-ref: ${{ needs.publish.outputs.ref }} 
          format: 'sarif'          
          output: 'trivy-results.sarif'

      - name: Upload image scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  sign:
    runs-on: ubuntu-22.04
    needs:
      - publish
      - scan
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      signature: ${{ steps.sign.outputs.signature }}
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.3.0

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign the image
        id: sign
        run: |
          cosign sign ${{ needs.publish.outputs.ref }} --yes
          echo "signature=$(cosign triangulate ${{ needs.publish.outputs.ref }})" >> $GITHUB_OUTPUT


  provenance: 
    # This job is responsible for generating the SLSA provenance for the image that was pushed to the registry.
    needs:
      - publish
      - sign
    permissions:
      actions: read # for detecting the Github Actions environment.
      id-token: write # for creating OIDC tokens for signing.
      packages: write # for uploading attestations.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.10.0
    with: 
      image: ${{ needs.publish.outputs.image }} 
      digest: ${{ needs.publish.outputs.digest }}
      registry-username: ${{ github.actor }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}
