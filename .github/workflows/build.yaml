name: Build and sign image

on:
  push:
  pull_request:

env:
  REGISTRY: ghcr.io
 
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'  # Specify the Go version

    - name: Format Code
      run: make fmt

    - name: Vet Code
      run: make vet

    - name: Run Tests
      run: make test

    - name: Build
      run: make build

  build-image:
    runs-on: ubuntu-22.04
    needs:
      - build-and-test
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v4

      - name: Update package version
        id: update-package-version
        uses: mikefarah/yq@master
        with:
          cmd: yq -i '.package.version = "${{ github.ref }}"' ./deployment/melange.yaml

      - name: Update continer image version
        id: update-image-version
        uses: mikefarah/yq@master
        with:
          cmd: yq -i '.environment.VERSION = "${{ github.ref }}"' ./deployment/apko.yaml

      - name: Create cache directory
        id: cache-dir
        shell: bash
        run: echo "cache_dir=$(go env GOMODCACHE)" >> "$GITHUB_OUTPUT"

      - name: Build enforcer package
        uses: chainguard-dev/actions/melange-build@main
        with:
          config: ./deployment/melange.yaml
          archs: amd64,arm64
          sign-with-temporary-key: true
          cache-dir: ${{ steps.cache.outputs.cache_dir }}

  publish-image:
    runs-on: ubuntu-22.04
    needs: 
      - build-image
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      matrix:
        tag: ${{ needs.build-image.outputs.tags }}
    steps:
      - name: Extract metadata (tags, labels) for image image
        id: meta
        uses: docker/metadata-action@v5
        with:
          tags: |
                type=sha,format=long
                type=schedule
                type=raw,${{ inputs.version }}
                type=ref,event=branch
                type=ref,event=tag
                type=ref,event=pr
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/replicated-license-enforcer
      - name: Push enforcer image
        uses: chainguard-images/actions/apko-publish@main
        id: apko-publish
        with:
          config: ./deployment/apko.yaml
          tag: ${{ matrix.tag }}
          archs: amd64,arm64
          vcs-url: true
          generic-user: ${{ github.actor }}
          generic-pass: ${{ secrets.GITHUB_TOKEN }}

  sign-image:
    runs-on: ubuntu-22.04
    needs:
      - build-image
      - publish-image
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      signature: ${{ steps.sign-image.outputs.signature }}
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.3.0

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign the image
        id: sign-image
        run: |
          cosign sign ${{ env.REGISTRY }}/${{ github.repository_owner }}/replicated-license-enforcer@${{ needs.build-image.outputs.digest }} --yes
          echo "signature=$(cosign triangulate ${{ env.REGISTRY }}/${{ github.repository_owner }}/replicated-license-enforcer@${{ needs.build.outputs.web-digest }})" >> $GITHUB_OUTPUT

