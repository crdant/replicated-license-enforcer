name: Build and sign image

on:
  schedule:
    - cron: '18 11 * * *'
  push:
    paths-ignore:
      - LICENSE
      - '**.md'
      - examples/**
    tag:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+\-beta\.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+\-alpha\.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+\-rc\.[0-9]+'
  pull_request:
    paths-ignore:
      - LICENSE
      - '**.md'
      - examples/**

env:
  REGISTRY: ghcr.io
 
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
    - uses: actions/checkout@v4
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'  # Specify the Go version

    - name: Format 
      run: make fmt

    - name: Vet 
      run: make vet

    - name: Test 
      run: make test

    - name: Scan
      uses: aquasecurity/trivy-action@0.21.0
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Build
      run: make build

  package:
    runs-on: ubuntu-22.04
    needs:
      - build
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up melange
        uses: chainguard-dev/actions/setup-melange@main

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]] ; then
            echo "version=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          else
            echo "version=build.${{ github.run_id }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Prepare key directory
        id: prepare-keydir
        run: |
          mkdir keys

      - name: Generate key
        id: generate-key
        uses: chainguard-dev/actions/melange-keygen@main
        with:
          signing-key-path: ./keys/melange.rsa

      - name: Update package version
        id: update-package-version
        uses: mikefarah/yq@master
        with:
          cmd: yq -i '.package.version = "${{ steps.version.outputs.version }}"' ./deployment/melange.yaml

      - name: Create cache directory
        id: cache-dir
        shell: bash
        run: echo "cache_dir=$(go env GOMODCACHE)" >> "$GITHUB_OUTPUT"

      - name: Build enforcer package
        id: package
        uses: chainguard-dev/actions/melange-build-pkg@main
        with:
          config: ./deployment/melange.yaml
          archs: amd64,arm64
          sign-with-key: true
          signing-key-path: ./keys/melange.rsa
          cache-dir: ${{ steps.cache.outputs.cache_dir }}

      - name: Upload public key
        id: upload-key
        uses: actions/upload-artifact@v4
        with:
          name: melange-public-key
          path: ./keys/melange.rsa.pub

      - name: Upload package
        id: upload-package
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: ./packages

  meta:
    runs-on: ubuntu-22.04
    needs: 
      - package
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      tags: ${{ steps.tags.outputs.tags }}
    steps:
      - uses: actions/checkout@v4

      - name: Update container image version
        id: update-image-version
        uses: mikefarah/yq@master
        with:
          cmd: yq -i '.environment.VERSION = "${{ needs.package.outputs.version }}"' ./deployment/apko.yaml

      - name: Extract metadata (tags, labels) for image image
        id: meta
        uses: docker/metadata-action@v5
        with:
          flavor: |
            latest=auto
          tags: |
            type=sha
            type=schedule,pattern=nightly
            type=schedule,pattern={{date 'YYYYMMDD'}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}.{{minor}}.{{patch}}
            type=edge,branch=main
            type=raw,${{ needs.prepare-build.outputs.version }}
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/replicated-license-enforcer

      - name: Generate an array of tags from the metadata
        id: tags
        run: |
          echo tags="$(echo '${{ steps.meta.outputs.json }}' | jq -c .tags)" >> "$GITHUB_OUTPUT"

  publish:
    runs-on: ubuntu-22.04
    needs: 
      - meta
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      matrix: 
        tag: ${{fromJson(needs.meta.outputs.tags)}}
    outputs:
      ref: ${{ steps.publish.outputs.digest }}
      image: ${{ steps.parse.outputs.image }}
      digest: ${{ steps.parse.outputs.digest }}
    steps:
      - uses: actions/checkout@v4

      - name: Download public key
        id: download-keys
        uses: actions/download-artifact@v4
        with:
          name: melange-public-key
          path: ./keys

      - name: Download packages
        id: download-packages
        uses: actions/download-artifact@v4
        with:
          name: packages
          path: ./packages
          
      - name: Push enforcer image
        uses: chainguard-images/actions/apko-publish@main
        id: publish
        with:
          config: ./deployment/apko.yaml
          tag: ${{ matrix.tag }}
          archs: amd64,arm64
          vcs-url: true
          generic-user: ${{ github.actor }}
          generic-pass: ${{ secrets.GITHUB_TOKEN }}

      - name: Parse ref
        id: parse
        run: |
          echo "image=$( echo '${{ steps.publish.outputs.digest }}' | cut -d'@' -f1)" >> "$GITHUB_OUTPUT"
          echo "digest=$( echo '${{ steps.publish.outputs.digest }}' | cut -d'@' -f2)" >> "$GITHUB_OUTPUT"
          
  scan:
    runs-on: ubuntu-22.04
    needs:
      - publish
    permissions:
      security-events: write
    steps:
      - name: Scan image
        uses: aquasecurity/trivy-action@0.21.0
        with:
          image-ref: ${{ needs.publish.outputs.ref }} 
          format: 'sarif'          
          output: 'trivy-results.sarif'

      - name: Upload image scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  sign:
    runs-on: ubuntu-22.04
    needs:
      - publish
      - scan
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      signature: ${{ steps.sign.outputs.signature }}
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.3.0

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign the image
        id: sign
        run: |
          cosign sign ${{ needs.publish.outputs.ref }} --yes
          echo "signature=$(cosign triangulate ${{ needs.publish.outputs.ref }})" >> $GITHUB_OUTPUT


  provenance: 
    # This job is responsible for generating the SLSA provenance for the image that was pushed to the registry.
    needs:
      - publish
      - sign
    permissions:
      actions: read # for detecting the Github Actions environment.
      id-token: write # for creating OIDC tokens for signing.
      packages: write # for uploading attestations.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.10.0
    with: 
      image: ${{ needs.publish.outputs.image }} 
      digest: ${{ needs.publish.outputs.digest }}
      registry-username: ${{ github.actor }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  prepare:
    runs-on: ubuntu-22.04
    needs:
      - provenance
    outputs:
      application-id: ${{ steps.application.outputs.id }}
      versions: ${{ steps.versions.outputs.versions }}
    steps:
      - name: Install Replicated CLI
        id: replicated
        run: |
          curl -s https://api.github.com/repos/replicatedhq/replicated/releases/latest \
            | grep "browser_download_url.*linux_amd64.tar.gz" \
            | cut -d : -f 2,3 \
            | tr -d \" \
            | wget -O replicated.tar.gz -qi -
          tar xf replicated.tar.gz replicated && rm replicated.tar.gz
          mv replicated /usr/local/bin/replicated

      - name: Get available versions
        id: versions
        run: |
          versions=$(replicated cluster versions --output json | \
            jq -c '[.[] | select(.short_name != "kurl" and .short_name != "embedded-cluster") | .short_name as $dist | .versions[] | {distribution: $dist, version: .}]')
          echo "versions=${versions}" >> "$GITHUB_OUTPUT"
        env:
          REPLICATED_API_TOKEN: ${{ secrets.REPLICATED_API_TOKEN }}


  validate:
    runs-on: ubuntu-22.04
    needs:
      - publish
      - prepare
      - provenance
    strategy:
      matrix:
        cluster: ${{ fromJson(needs.prepare.outputs.versions) }}
    steps:
      - uses: actions/checkout@v4

      - uses: kyverno/action-install-chainsaw@v0.1.0

      - name: Install Replicated CLI
        id: replicated
        run: |
          curl -s https://api.github.com/repos/replicatedhq/replicated/releases/latest \
            | grep "browser_download_url.*linux_amd64.tar.gz" \
            | cut -d : -f 2,3 \
            | tr -d \" \
            | wget -O replicated.tar.gz -qi -
          tar xf replicated.tar.gz replicated && rm replicated.tar.gz
          mv replicated /usr/local/bin/replicated

      - name: Create test application
        id: application
        run: |
          replicated app create ${{ github.ref_name }}-${{ matrix.cluster.distribution }}-${{ matrix.cluster.version }}
          slug=$(replicated app ls --output json | jq -r --arg application ${{ github.ref_name }}-${{ matrix.cluster.distribution }}-${{ matrix.cluster.version }} '.[] | select(.app.name == $application) | .app.slug')
          channel=$(replicated app ls --output json | jq -r --arg application ${{ github.ref_name }}-${{ matrix.cluster.distribution }}-${{ matrix.cluster.version }} '.[] | select(.app.name == $application) | .channels[] | select(.name == "Stable") | .channelSlug')
          echo "slug=${slug}" >> "$GITHUB_OUTPUT"
          echo "channel=${channel}" >> "$GITHUB_OUTPUT"
        env:
          REPLICATED_API_TOKEN: ${{ secrets.REPLICATED_API_TOKEN }}
          
      - name: Create Customer 
        id: create-customer
        uses: replicatedhq/replicated-actions/create-customer@v1
        with:
          app-slug: ${{ steps.application.outputs.slug }}
          api-token: ${{ secrets.REPLICATED_API_TOKEN }}
          customer-name: ${{ github.ref_name }}-${{ matrix.cluster.distribution }}-${{ matrix.cluster.version }}
          channel-slug: ${{ steps.application.outputs.channel }}
          customer-email: ${{ github.ref_name }}@example.com
          expires-in: 14

      - name: Create test cluster
        id: create-cluster
        uses: replicatedhq/replicated-actions/create-cluster@v1
        with:
          api-token: ${{ secrets.REPLICATED_TOKEN }}
          kubernetes-distribution: ${{ matrix.cluster.distribution }}
          kubernetes-version: ${{ matrix.cluster.version }}
          ttl: 4h
          cluster-name: enforcer-${{ matrix.cluster.distribution }}-${{ matrix.cluster.version }}-${{ needs.publis.outputs.digest }}

      - name: Prepare
        id: prepare-test
        run: |
          for dir in $(find test -type d -mindepth 1) ; do
            yq -i '.spec.template.spec.initContainers[0].image = ${{ needs.publish.outputs.image }}' ${dir}/scaffold.yaml
          done
          yq -n '.application = ${{ env.REPLICATED_APP }}, .license = ${{ steps.create-customer.outputs.license-id }}' > values.yaml
          echo ${{ steps.create-cluster.outputs.kubeconfig }} > kubeconfig

      - name: Test
        id: test
        run: |
          export KUBECONFIG=$(pwd)/kubeconfig
          chainsaw test ./test --values values.yaml 

      - name: Remove Cluster
        id: remove-cluster
        uses: replicatedhq/replicated-actions/remove-cluster@v1
        continue-on-error: true # It could be that the cluster is already removed
        with:
          api-token: ${{ secrets.REPLICATED_API_TOKEN }}
          cluster-id: ${{ steps.create-cluster.outputs.cluster-id }}

      - name: Archive Customer
        id: archive-customer
        if: always()
        continue-on-error: true # It could be that the customer is already removed
        uses: replicatedhq/replicated-actions/archive-customer@v1
        with:
          api-token: ${{ secrets.REPLICATED_API_TOKEN }}
          customer-id:  ${{ steps.create-customer.outputs.customer-id }}

      - name: Delete test application
        id: remove-application
        if: always()
        continue-on-error: true # It could be that the application is already removed
        run: |
          echo -n "id=" >> "$GITHUB_OUTPUT"
          replicated app delete ${{ steps.create-application.outputs.slug }} --force
        env:
          REPLICATED_API_TOKEN: ${{ secrets.REPLICATED_API_TOKEN }}
          

  finalize:
    runs-on: ubuntu-22.04
    needs: 
      - publish
      - provenance
      - validate
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      tags: ${{ steps.tags.outputs.tags }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract metadata (tags, labels) for image image
        id: meta
        uses: docker/metadata-action@v5
        with:
          flavor: |
            latest=auto
          tags: |
            type=sha
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}.{{minor}}.{{patch}}
            type=edge,branch=main
            type=ref,event=tag
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/replicated-license-enforcer

      - name: Generate an array of tags from the metadata
        id: tags
        run: |
          echo tags="$(echo '${{ steps.tags.outputs.json }}' | jq -c .tags)" >> "$GITHUB_OUTPUT"


  release:
    runs-on: ubuntu-22.04
    needs: 
      - finalize
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      matrix: 
        tag: ${{fromJson(needs.finalize.outputs.tags)}}
    outputs:
      ref: ${{ steps.publish.outputs.digest }}
      image: ${{ steps.parse.outputs.image }}
      digest: ${{ steps.parse.outputs.digest }}
    steps:
      - uses: actions/checkout@v4

      - name: Download public key
        id: download-keys
        uses: actions/download-artifact@v4
        with:
          name: melange-public-key
          path: ./keys

      - name: Download packages
        id: download-packages
        uses: actions/download-artifact@v4
        with:
          name: packages
          path: ./packages
          
      - name: Push enforcer image
        uses: chainguard-images/actions/apko-publish@main
        id: publish
        with:
          config: ./deployment/apko.yaml
          tag: ${{ matrix.tag }}
          archs: amd64,arm64
          vcs-url: true
          generic-user: ${{ github.actor }}
          generic-pass: ${{ secrets.GITHUB_TOKEN }}

      - name: Parse ref
        id: parse
        run: |
          echo "image=$( echo '${{ steps.publish.outputs.digest }}' | cut -d'@' -f1)" >> "$GITHUB_OUTPUT"
          echo "digest=$( echo '${{ steps.publish.outputs.digest }}' | cut -d'@' -f2)" >> "$GITHUB_OUTPUT"
